{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 SitkaText;}{\f1\fnil\fcharset0\fprq2 Consolas;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\f0\fs36\cf0
\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\ltrch\loch {\f0\fs36\b0\i0 The line racer uses a microphone to detect the start whistle and begin it\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s run through the racecourse.}
\par\plain {\f0\fs36\b0\i0 The mic is connected to the Arduino via a three pin connector to digital port 8 and sound is detected as a high or low voltage on the corresponding Arduino pin.}
\par\plain {\f0\fs36\b0\i0 An adjustable potentiometer on the sensor sets the threshold at which a noise will result in low value being sent to the Arduino.}
\par\plain {\f0\fs36\b0\i0 Two LEDs on the unit provide a quick visual indicator for when voltage is applied to the sensor and when a sound triggers a voltage drop at the Arduino.}
\par\plain {\f0\fs36\b0\i0 The following script uses the digitalRead function to detect mic-induced voltage level at pin 8 and send a serial message back to the computer where it can be read on the Arduino IDE.}
\par\plain \f0\fs36\b0\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f1\fs22\b0\i0 <$Scr_Ps::0>const int MIC_PIN = 8;}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 void setup() \{}
\par\plain {\f1\fs22\b0\i0   Serial.begin(9600);       // use the serial port}
\par\plain {\f1\fs22\b0\i0 \}}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 void loop() \{}
\par\plain {\f1\fs22\b0\i0   Serial.println(digitalRead(MIC_PIN));}
\par\plain {\f1\fs22\b0\i0 \}<!$Scr_Ps::0>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\ltrch\loch \f0\fs36\b0\i0
\par\plain {\f0\fs36\b0\i0 In the absence of a detectable sound, this code will print a series of ones in the IDE output window.  Provided you have the potentiometer set correctly on the sensor, speaking or clapping will generate a brief stream of zeros to appear on your display.}
\par\plain {\f0\fs36\b0\i0 It\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s possible to improve this routine by having the Arduino count the number of sound ticks over a period time to report the frequency of the incoming sound wave.}
\par\plain {\f0\fs36\b0\i0 The following program, uses a variable called pulseCount to count the number of audio events over a period of time defined by samplePeriod.  In this example, millis() is a built-in function that reports the current time in milliseconds.}
\par\plain \f0\fs36\b0\i0
\par\pard\plain \tx720\tx1080\tx1440\tx1800\tx2160\li720\ltrch\loch {\f1\fs22\b0\i0 <$Scr_Ps::0>const int MIC_PIN = 8;}
\par\plain {\f1\fs22\b0\i0 const int samplePeriod = 10; // Milliseconds}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 unsigned long timeMarker;}
\par\plain {\f1\fs22\b0\i0 unsigned long currentTime;}
\par\plain {\f1\fs22\b0\i0 int pulseCount;}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 void setup() \{}
\par\plain {\f1\fs22\b0\i0   Serial.begin(9600);}
\par\plain {\f1\fs22\b0\i0 \}}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0 void loop() \{}
\par\plain \f1\fs22\b0\i0
\par\plain {\f1\fs22\b0\i0   currentTime = millis();}
\par\plain {\f1\fs22\b0\i0   }
\par\plain {\f1\fs22\b0\i0   if (currentTime-timeMarker > samplePeriod) \{}
\par\plain {\f1\fs22\b0\i0     Serial.println(pulseCount, DEC);}
\par\plain {\f1\fs22\b0\i0     pulseCount = 0;}
\par\plain {\f1\fs22\b0\i0     timeMarker = currentTime;}
\par\plain {\f1\fs22\b0\i0   \}}
\par\plain {\f1\fs22\b0\i0   }
\par\plain {\f1\fs22\b0\i0   if (digitalRead(MIC_PIN) == LOW) \{}
\par\plain {\f1\fs22\b0\i0     pulseCount += 1;}
\par\plain {\f1\fs22\b0\i0   \}}
\par\plain {\f1\fs22\b0\i0   }
\par\plain {\f1\fs22\b0\i0 \}<!$Scr_Ps::0>}
\par\pard\plain \tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\ltrch\loch \f0\fs36\b0\i0
\par\plain {\f0\fs36\b0\i0 Now when you run the code and speak into the mic, it will display a range of values that indicate the frequency of sound events.}}