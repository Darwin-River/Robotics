<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="262B0DC4-0BB4-4CA3-B237-5CFDDAE43A8D">
            <Title>Assemblies</Title>
        </Document>
        <Document ID="3252A844-369A-4983-A315-8BD633B15CC5">
            <Title>Photodiodes</Title>
            <Text>Photodiode

UMLIFE 20PCS 5MM LDR Photosensitive Sensor Module Light Dependent Resistor Sensor Module Digital Light Detection LM393 3 pins for Arduino https://www.amazon.com/dp/B09NCXKW9B</Text>
        </Document>
        <Document ID="4053E088-AB0A-4206-82D4-F04B5FFE360A">
            <Title>Servo connections</Title>
            <Text>Connect the right and left servo wires to digital pins two and three respectively.</Text>
        </Document>
        <Document ID="51E7AD10-2DF7-4D2E-803E-044C63A1EAED">
            <Title>Wire connectors</Title>
            <Text>Wire connectors

uxcell 10cm 2.54mm 3 Pin Female to Female F/F Jumper Cable Connector 5 Pcs https://www.amazon.com/dp/B00O9Y8HYO</Text>
        </Document>
        <Document ID="5F6EEEDD-C02E-4E95-AEEF-F3A8FB318080">
            <Title>Microphone</Title>
            <Synopsis>The microphone is required to start the robot</Synopsis>
            <Text>DAOKI 5PCS High Sensitivity Sound Microphone Sensor Detection Module for Arduino AVR PIC https://www.amazon.com/dp/B00XT0PH10</Text>
        </Document>
        <Document ID="6BD793E7-9395-4451-9A7F-CD332E92211C"/>
        <Document ID="6DC39BCD-CE2D-4F50-A0D7-F00E9FC4681F"/>
        <Document ID="734A7F42-5490-4AF9-AE5D-4212440E65CC">
            <Title>Battery holder</Title>
            <Text>Battery holder

Corpco 4 AA Battery Holder with 5.5x2.1mm Connector 6V Output 2 Pack https://www.amazon.com/dp/B07PXZZS6L</Text>
        </Document>
        <Document ID="74DCD1C0-024C-4476-BDF1-1CE2C2EE92BC">
            <Title>Parts</Title>
            <Text>All electronics for this project use commercial off the shelf products that fit together without any need for soldering.
</Text>
        </Document>
        <Document ID="7F9DC9E1-E48F-46AC-B0D6-07DE30989900">
            <Title>Basic Rules</Title>
            <Text>1. Each player has a line following robot.
2. The robots are placed on opposite sides of the arena.
3. Clap your hands to start the robots racing.
4. The first robot to get to the end of the path and back wins.</Text>
        </Document>
        <Document ID="8D3CDBBF-7024-4F9B-B487-27454E76D62A">
            <Title>Test Code</Title>
            <Text>This is a copy of the code that I’m using to develop and test the line following robot.

/*
Moves the servo
*/

#include &lt;Servo.h&gt;

Servo myServo;

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  myServo.attach(9,600,2300);
}

void loop() {
  digitalWrite(LED_BUILTIN,HIGH);
  myServo.write(0);
  delay(1000);
  digitalWrite(LED_BUILTIN,LOW);
  myServo.write(90);
  delay(1000);
  myServo.write(180);
  delay(1000);
}
</Text>
        </Document>
        <Document ID="9E3CEDD1-0D29-41C1-93F9-DAA7C9700D43">
            <Title>Codes</Title>
        </Document>
        <Document ID="B375DAF0-C661-4FB6-BEB2-E888B72AABF9">
            <Title>Arduino Mini</Title>
            <Text>Arduino Mini

LAFVIN Nano V3.0, Nano Board ATmega328P 5V 16M Micro-Controller Board Compatible with Arduino IDE (Nano x 3 with USB Cable) https://www.amazon.com/dp/B07G99NNXL</Text>
        </Document>
        <Document ID="D5AA492F-A959-4287-8671-74A9AF063B08">
            <Title>IO Shield</Title>
            <Text>IO Shield

This printed circuit board has a width of approximately 1.75 mm.

HiLetgo 5pcs Nano I/O Expansion Sensor Shield for Arduino UNO R1 Nano 3.0 Duemilanove 2009 https://www.amazon.com/dp/B07VQRCC8F</Text>
        </Document>
        <Document ID="D91776D9-4F60-4080-B3BF-8B0A2115E4FA">
            <Title>Rules</Title>
        </Document>
        <Document ID="DFDBDDA7-0353-4C3F-B1CE-C7909711C9CB">
            <Title>Microphone</Title>
            <Text>The line racer uses a microphone to detect the start whistle and begin it’s run through the racecourse.
The mic is connected to the Arduino via a three pin connector to digital port 8 and sound is detected as a high or low voltage on the corresponding Arduino pin.
An adjustable potentiometer on the sensor sets the threshold at which a noise will result in low value being sent to the Arduino.
Two LEDs on the unit provide a quick visual indicator for when voltage is applied to the sensor and when a sound triggers a voltage drop at the Arduino.
The following script uses the digitalRead function to detect mic-induced voltage level at pin 8 and send a serial message back to the computer where it can be read on the Arduino IDE.

const int MIC_PIN = 8;

void setup() {
  Serial.begin(9600);       // use the serial port
}

void loop() {
  Serial.println(digitalRead(MIC_PIN));
}

In the absence of a detectable sound, this code will print a series of ones in the IDE output window.  Provided you have the potentiometer set correctly on the sensor, speaking or clapping will generate a brief stream of zeros to appear on your display.
It’s possible to improve this routine by having the Arduino count the number of sound ticks over a period time to report the frequency of the incoming sound wave.
The following program, uses a variable called pulseCount to count the number of audio events over a period of time defined by samplePeriod.  In this example, millis() is a built-in function that reports the current time in milliseconds.

const int MIC_PIN = 8;
const int samplePeriod = 10; // Milliseconds

unsigned long timeMarker;
unsigned long currentTime;
int pulseCount;

void setup() {
  Serial.begin(9600);
}

void loop() {

  currentTime = millis();
  
  if (currentTime-timeMarker &gt; samplePeriod) {
    Serial.println(pulseCount, DEC);
    pulseCount = 0;
    timeMarker = currentTime;
  }
  
  if (digitalRead(MIC_PIN) == LOW) {
    pulseCount += 1;
  }
  
}

Now when you run the code and speak into the mic, it will display a range of values that indicate the frequency of sound events.</Text>
        </Document>
        <Document ID="E0473435-9477-40EA-8AC1-9534DE8A3E85">
            <Title>Prints</Title>
            <Text>This section describes the 3D printed parts, which must either be printed on your own 3D printer or ordered from a custom printer at an affordable price.
The scripts are provided as OpenSCAD source code, which can be rendered as STL files using the free OpenSCAD open source modeling software.
You can download the software from https://openscad.org. There is also a convenient cheat sheet for using the simple scripting language at https://openscad.org/cheatsheet/index.html.

Downloadable STL files are also available on Thingiverse.</Text>
        </Document>
        <Document ID="E37287BD-8D85-478C-850E-A92055739EF1"/>
        <Document ID="F8855DF9-127E-44C3-8D2F-5BCE9DCFA4FB">
            <Title>Chasis</Title>
            <Text>The line following robot used in this challenge only requires a chassis and two wheels, which are described here.

// Variables
// All measurements are given in mm.

cbLength = 54.1;
cbWidth = 1.75;
cbHeight = 58;

servoLength = 22.6;
servoWidth = 12.5;
servoHeight = 17.5;

servoWireWidth = 4.6;
servoTerminalWidth = 10;
servoTabThickness = 2.55;
servoTabLength = 32.25;

batteryLength = 62.5;
batteryWidth =15.5;
batteryHeight = 58.0;

baseLength = batteryLength+15;
baseHeight = baseLength;
baseWidth = servoTabLength;

// Execute
rotate([-90,0,0]) difference() {
    base();
    translate([0,-baseWidth/2+5,baseHeight/2+servoTerminalWidth/2+5]) rotate([90,0,0]) cbCutout();
    translate([-baseLength/2,0,baseHeight/2]) 
        rotate([0,90,0]) rotate([0,0,-90]) servoCutout();
    translate([baseLength/2,0,baseHeight/2]) 
        rotate([0,-90,0]) rotate([0,0,-90]) servoCutout();
    translate([0,-baseWidth/2+5,batteryWidth/2+5]) rotate([-90,0,0]) batteryCutout();
}

// Modules
module newCube(dim, off, loc, rot) {
    translate(loc)
    rotate(rot)
        translate(off)
            cube(dim);
}

module base() {
    translate([0,0,baseHeight/2])
        cube([baseLength, baseWidth, baseHeight], true);
}

module cbCutout() {
    margin = 5.5;
    doubleMargin = margin * 2;
    componentsWidth = 28;
    solderClearance = 3;
    translate([0, 0, -cbHeight/2]) union() {
        cube([cbLength, cbWidth, cbHeight], true);
        translate([0, componentsWidth/2-solderClearance,0])
            cube([cbLength-doubleMargin, componentsWidth, cbHeight-doubleMargin], true);
    }
}

module servoCutout() {
    wireClearance = 1;
    cylinderLength = 50;
    translate([0, 0, servoHeight/2 + servoTabThickness])
    union() {
        cube([servoLength, servoWidth, servoHeight], true);
        translate([-wireClearance,0,0]) cube([servoLength, servoWireWidth, servoHeight], true);
        translate([0,0,-(servoHeight+servoTabThickness)/2])
            cube([servoTabLength, servoWidth, servoTabThickness], true);
        translate([servoLength/2-cylinderLength/2,0,servoHeight/2])
            rotate([0,90,0])
                cylinder(h=cylinderLength, r=servoTerminalWidth/2, center=true);
    }
}

module batteryCutout() {
    translate([0,0,batteryHeight/2])
        cube([batteryLength,batteryWidth,batteryHeight], true);
}</Text>
        </Document>
        <Document ID="FBD5A1F1-EF30-4EB9-A6D8-BE1541BFB9BA">
            <Title>Continuous motion servos</Title>
            <Text>Continuous servo

Feetech FS90R Analog Servo 360 Degree Continuous Rotation Micro RC Servo with Wheel for RC Car plane Robot (4 sets) https://www.amazon.com/dp/B07FVQBNTD</Text>
        </Document>
    </Documents>
</SearchIndexes>
